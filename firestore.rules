rules_version = '2';

service cloud.firestore {
	match /databases/{database}/documents {

		// User online check.
		function userIsOnline() {
			return request.auth != null;
		}

		// Current user doc ref.
		function currentUserDoc() {
			return get(/databases/$(database)/documents/users/$(request.auth.uid));
		}
				
		// User complete check.
		function currentUserIsComplete() {
			return currentUserDoc().data.isComplete == true;
		}

		// Is owner.
		function isOwner(userId) {
			return userId == request.auth.uid;
		}
				


		// Post data check.
		function checkPostCreateData(docData) {
			return (
				docData.keys().hasOnly(['body', 'hashtags', 'created']) &&
				docData.body is string &&
				docData.hashtags is list &&
				docData.created is timestamp
				);
		}

		// Edit user data check.
		function checkEditUserData(docData) {
			return (
				docData.keys().hasOnly(['username', 'bio', 'profilePicExists', 'isComplete']) &&
				docData.username is string &&
				docData.bio is string &&
				docData.get('profilePicExists', false) is bool &&
				docData.get('isComplete', true) is bool
				);
		}

		// Create user data check.
		function checkCreateUserData(docData) {
			return (
				docData.keys().hasOnly(['isComplete']) &&
				docData.isComplete is bool &&
				docData.isComplete == false
			);
		}

		// Hashtag data check.
		function checkCreateHashtagData(docData) {
			return (
				docData.keys().hasOnly(['name']) &&
				docData.name is string
			);
		}

		// Post like create data check.
		function checkCreatePostLikeData(docData) {
			return (
				docData.keys().hasOnly(['userId', 'created']) &&
				docData.userId == request.auth.uid &&
				docData.created is timestamp
			);
		}
		


		// Users.
		match /users/{userId} {
			allow read;
			allow update: if userIsOnline() && isOwner(userId) && checkEditUserData(request.resource.data);
			allow create: if userIsOnline() && checkCreateUserData(request.resource.data);
			// Posts.
			match /posts/{postId} {
				allow create: if userIsOnline() && currentUserIsComplete() && isOwner(userId) && checkPostCreateData(request.resource.data);
				// Likes.
				match /likes/{likerId} {
					allow create: if userIsOnline() && currentUserIsComplete() && checkCreatePostLikeData(request.resource.data);
					allow delete: if userIsOnline() && currentUserIsComplete() && isOwner(likerId);
				}
			}
		}

		// Posts.
		match /{path=**}/posts/{postId} {
			allow read;
		}
		// Likes.
		match /{path=**}/likes/{likerId} {
			allow read;
		}
		
		// Hashtags.
		match /hashtags/{hashtagId} {
			allow read;
			allow create: if userIsOnline() && currentUserIsComplete() && checkCreateHashtagData(request.resource.data);
		}
	
	}
}

