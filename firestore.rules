service cloud.firestore {
	match /databases/{database}/documents {
		


		// Current user doc ref.
		function currentUserDoc() {
			return get(/databases/$(database)/documents/users/$(request.auth.uid));
		}

		// User online check.
		function userIsOnline() {
			return request.auth != null;
		}
		
		// User complete check.
		function userIsComplete() {
			return userIsOnline() && currentUserDoc().data.username != null && currentUserDoc().data.bio != null;
		}
		


		// Post data check.
		function postDataCheck() {
			return request.resource.data.body != null && request.resource.data.hashtags != null && request.resource.data.created != null && request.resource.data.user.path == "users/" + currentUserDoc().id;
		}

		// User data check.
		function userDataCheck() {
			return userIsOnline() && request.resource.data.username != null && request.resource.data.bio != null && request.resource.data.email != null && request.auth.uid == userId;
		}

		// Hashtag data check.
		function hashtagDataCheck() {
			return request.resource.data.amount != null && request.resource.data.name != null;
		}

		// Post like data check.
		function postLikeDataCheck() {
			return request.resource.data.user.path == "users/" + currentUserDoc().id && request.resource.data.created != null;
		}
		
		

		// Posts.
		match /posts/{postId} {
			allow read;
			allow create: if userIsComplete() && postDataCheck();
		}

		// Post likes.
		match /posts/{postId}/likes/{userId} {
			allow read;
			allow create: if userIsComplete() && postLikeDataCheck();
		}
		
		// Users.
		match /users/{userId} {
			allow read;
			allow update: if userIsComplete() && userDataCheck();
			allow create: if userIsOnline() && userDataCheck();
		}
		
		// Hashtags.
		match /hashtags/{hashtagId} {
			allow read;
			allow create: if userIsComplete() && hashtagDataCheck();
		}
	
	}
}

